@using RouteInstruction = EcoTrails.Shared.Features.ManageTrails.RouteInstruction

<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
	<FluentValidationValidator />
	<FormSection Title="Basic Details"
	HelpText="This information is used to identify the trail and can be searched to help hikers find it.">
		<FormFieldSet>
			<label for="trailName" class="font-weight-bold text-secondary mb-2">Name</label>
			<InputText @bind-Value="_trail.Name" class="form-control" id="trailName" />
			<ValidationMessage For="@(() => _trail.Name)" />
		</FormFieldSet>
		<FormFieldSet>
			<label for="trailDescription" class="font-weight-bold text-secondary mb-2">Description</label>
			<InputTextArea @bind-Value="_trail.Description" rows="6" class="form-control" id="trailDescription" />
			<ValidationMessage For="@(() => _trail.Description)" />
		</FormFieldSet>
		<FormFieldSet>
			<label for="trailLocation" class="font-weight-bold text-secondary" mb-2>Location</label>
			<InputText @bind-Value="_trail.Location" class="form-control" id="trailLocation" />
			<ValidationMessage For="@(() => _trail.Location)" />
		</FormFieldSet>
		<FormFieldSet>
			<label for="trailImage" class="font-weight-bold text-secondary mb-2">Image</label>
			<InputFile id="trailImage" class="form-control-file" accept=".png,.jpg,.jpeg"
			OnChange="LoadTrailImage" />
		</FormFieldSet>
	</FormSection>
	<FormSection Title="Difficulty"
	HelpText="Help other hikers out by telling them the length of the trail is how long it might take them.">
		<FormFieldSet>
			<label for="trailLength" class="font-weight-bold text-secondary" mb-2>Length (km)</label>
			<InputNumber @bind-Value="_trail.Length" class="form-control" id="trailLength" />
			<ValidationMessage For="@(() => _trail.Length)" />
		</FormFieldSet>
		<FormFieldSet>
			<label for="trailTime" class="font-weight-bold text-secondary mb-2">Time</label>
			<InputTime id="trailTime" @bind-Value="_trail.TimeInMinutes" />
			<ValidationMessage For="@(() => _trail.TimeInMinutes)" />
		</FormFieldSet>
	</FormSection>
	<FormSection Title="Route Instructions"
	HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">
		@{
			var i = 0;
		}
		@foreach (var routeInstruction in _trail.Route)
		{
			i++;
			routeInstruction.Stage = i;

			<div class="row">
				<div class="col-2">
					<div class="form-group">
						<label class="font-weight-bold text-secondary mb-2">Stage</label>
						<p>@routeInstruction.Stage</p>
					</div>
				</div>
				<div class="col">
					<div class="form-group">
						<label for="routeInstructionDescription" class="font-weight-bold text-secondary mb-2">Description</label>
						<div style="display:flex">
							<InputText @bind-Value="routeInstruction.Description" class="form-control" id="routeInstructionDescription" />
							<button @onclick="@(() => _trail.Route.Remove(routeInstruction))" class="btn btn-link" type="button">
								<svg width="16" height="16" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
									<path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
								</svg>
							</button>
						</div>
						<ValidationMessage For="@(() => routeInstruction.Description)" />
					</div>
				</div>
			</div>
		}

		<div class="row mt-3">
			<div class="col">
				<button class="btn btn-outline-primary" type="button"
				@onclick="@(() => _trail.Route.Add(new RouteInstruction()))">
					Add Instruction
				</button>
				<ValidationMessage For="@(() => _trail.Route)" />
			</div>
		</div>
	</FormSection>

	<div class="mt-4 mb-5">
		<div class="float-end">
			<button class="btn btn-outline-secondary" type="button" @onclick="@(() => _trail = new TrailDto())">Reset</button>
			<button class="btn btn-primary" type="submit">Submit</button>
		</div>
	</div>
</EditForm>

@code {
	private EditContext _editContext;
	private TrailDto _trail = new TrailDto();
	private IBrowserFile? _trailImage;

	[Parameter]
	public Func<TrailDto, IBrowserFile?, Task> OnSubmit { get; set; }

	public void ResetForm()
	{
		_trail = new TrailDto();
		_trailImage = null;
		_editContext = new EditContext(_trail);
		_editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
	}

	protected override void OnInitialized()
	{
		_editContext = new EditContext(_trail);
		_editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
	}

	private async Task SubmitForm() => await OnSubmit(_trail, _trailImage);

	private void LoadTrailImage(InputFileChangeEventArgs e) =>
		_trailImage = e.File;
}
